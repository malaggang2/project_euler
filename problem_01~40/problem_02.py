# Problem_02
# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
# By considering the terms in the Fibonacci sequence
# whose values do not exceed four million, find the sum of the even-valued terms.
import time

def fibo(n):
    if n == 1 or n == 2:
        return 1
    return fibo(n-1) + fibo(n-2)

n = 3
result = 0
start_time = time.time()
while fibo(n) < 4000000:
    if fibo(n) % 2 == 0:
        result += fibo(n)
    n += 1
print(result)
print("{} seconds".format(time.time() - start_time))

# whenever input("n") changes, function fibo(n) repeat recursive function unnecessarily..
# other's coding example : much faster than my code.....

a = 1
b = 1
r = 0
second_start_time = time.time()
while True:
    a, b = b, a+b
    if b>4000000:
        break
    if b%2==0:
        r += b
print(r)
print("{} seconds".format(time.time() - second_start_time))
