# Problem_61
# Cyclical figurate numbers

# Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are
# all figurate (polygonal) numbers and are generated by the following formulae:
#
# Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
# Square	 	P4,n=n^2            1, 4, 9, 16, 25, ...
# Pentagonal	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
# Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
# Heptagonal	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
# Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
# The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
#
# 1. The set is cyclic, in that the last two digits of each number is the first two digits
# of the next number (including the last number with the first).
# 2. Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882),
# is represented by a different number in the set.
# 3. This is the only set of 4-digit numbers with this property.
# Find the sum of the only ordered set of six cyclic 4-digit numbers for which
# each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal,
# is represented by a different number in the setself.
import time

start_time = time.time()

triangles = [int(n*(n+1)/2) for n in range(45, 141)]
squares = [n**2 for n in range(32, 100)]
pentagonals = [int(n*(3*n-1)/2) for n in range(26, 82)]
hexagonals = [int(n*(2*n-1)) for n in range(23, 71)]
heptagonals = [int(n*(5*n-3)/2) for n in range(21, 64)]
octagonals = [n*(3*n-2) for n in range(19, 59)]

sets = [triangles, squares, pentagonals, hexagonals, heptagonals]

def get_cyclic(input, std, cache, level=0):
    if level == 0 and str(std[0])[-2:] == str(cache[0])[:2]:
        return std
    for a in std:
        chk = str(a)[-2:]
        for i in input:
            tmp = [n for n in i if str(n).startswith(chk)]
            if tmp == []:
                continue
            new_input = [n for n in input if n != i]
            if level == 5:
                cache = [a]
            result = get_cyclic(new_input, tmp, cache, level-1)
            if result is not None:
                result.append(a)
                return result

answer = get_cyclic(sets, octagonals, [], level=5)
print(f"Answer: {sum(answer)}\nordered_set: {answer[::-1]} ")
print("%.6f seconds" % (time.time() - start_time))
