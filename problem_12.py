# Problem_12
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?
import time

def nth_tri_num(n):
    return int(n*(n+1)/2)

def get_nums_of_divisors(n):
    if n == 1:
        return 1
    else:
        result = 2
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                result += 1
                if i != n // i:
                    result += 1
        return result

start_time = time.time()
n = 1
while get_nums_of_divisors(nth_tri_num(n)) < 500:
    n += 1
print(nth_tri_num(n), n)
print("%.6f seconds" % (time.time() - start_time))
